name: Deploy to ECS

on:
  # workflow_run:
  #   workflows: ["Build Test and Push Docker image to ECR"]
  #   types:
  #     - completed
  workflow_dispatch: # Allows manual execution

env:
  AWS_REGION: ap-southeast-2
  ECS_CLUSTER: hopjetair-cluster
  ECS_SERVICE: hopjetair-rag-api-service #task family name : non-ai-api-task    Task_name : non-ai-api-taskcontainer
  ECS_TASK_DEFINITION: task-definition.json
  ECS_TASK_CONTAINER: rag-api-taskcontainer
  AWS_ROLE_ARN: arn:aws:iam::489582127457:role/GitHubActionsRole

permissions:
  id-token: write # Required for OIDC
  contents: read # Required to checkout code

jobs:
  ecs:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # Only run if ECR workflow succeeded
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download image URI artifact
        uses: actions/download-artifact@v4
        with:
          name: image-uri
          path: image-uri
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify artifact download
        run: |
          ls -R image-uri
          if [ ! -f image-uri/image-uri.txt ]; then
            echo "Error: image-uri.txt not found in downloaded artifact"
            exit 1
          fi

      - name: Read image URI
        id: read-image
        run: |
          IMAGE_URI=$(cat image-uri/image-uri.txt)
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "Read image URI: $IMAGE_URI"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Render Amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.ECS_TASK_CONTAINER }}
          image: ${{ steps.read-image.outputs.image }}:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
